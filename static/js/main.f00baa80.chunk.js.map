{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","firstOption","secondOption","handleFirstInputChange","value","setState","handleSecondInputChange","console","log","this","className","groupName","selectedOption","handleInputChange","Component","RadioGroup","props","id","group","label","isSelected","Radio","type","name","onChange","checked","htmlFor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAIMA,E,4MACJC,MAAQ,CACNC,aAAa,EACbC,cAAc,G,EAIhBC,uBAAyB,SAACC,GACxB,EAAKC,SAAS,CACZJ,YAAaG,K,EAIjBE,wBAA0B,SAACF,GACzB,EAAKC,SAAS,CACZH,aAAcE,K,4CAIpB,WAEE,OADAG,QAAQC,IAAIC,KAAKT,OAEf,qBAAKU,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UAEI,cAAC,EAAD,CACEC,UAAU,aACVC,eAAgBH,KAAKT,MAAMC,YAC3BY,kBAAmBJ,KAAKN,yBAE1B,cAAC,EAAD,CACEQ,UAAU,cACVC,eAAgBH,KAAKT,MAAME,aAC3BW,kBAAmBJ,KAAKH,mC,GAjClBQ,aA0CZC,EAAa,SAACC,GAClB,OACE,sBAAKN,UAAU,aAAf,UACE,qBAAKA,UAAS,yBAAoBM,EAAMJ,kBACxC,cAAC,EAAD,CACEK,GAAE,UAAKD,EAAML,UAAX,cACFO,MAAOF,EAAML,UACbP,MAAM,OACNe,MAAM,QACNC,WAAqC,SAAzBJ,EAAMJ,eAClBC,kBAAmBG,EAAMH,oBAE3B,cAAC,EAAD,CACEI,GAAE,UAAKD,EAAML,UAAX,eACFO,MAAOF,EAAML,UACbP,MAAM,QACNe,MAAM,SACNC,WAAqC,UAAzBJ,EAAMJ,eAClBC,kBAAmBG,EAAMH,wBAI3BQ,EAAQ,SAACL,GACb,OACE,qCACE,uBACEM,KAAK,QACLL,GAAID,EAAMC,GACVM,KAAMP,EAAME,MACZd,MAAOY,EAAMZ,MACboB,SAAU,kBAAMR,EAAMH,kBAAkBG,EAAMZ,QAC9CqB,QAAST,EAAMI,aACjB,uBAAOM,QAASV,EAAMC,GAAtB,SACCD,EAAMG,YAMEpB,ICzEA4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f00baa80.chunk.js","sourcesContent":["import { React, Component} from 'react';\nimport './App.css';\n\n\nclass App extends Component { \n  state = { \n    firstOption: false,\n    secondOption: false\n  }\n\n  \n  handleFirstInputChange = (value) => {\n    this.setState({\n      firstOption: value\n    });\n  };\n\n  handleSecondInputChange = (value) => {\n    this.setState({\n      secondOption: value\n    });\n  };\n\nrender() {\n  console.log(this.state)\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n          <RadioGroup \n            groupName=\"firstGroup\"\n            selectedOption={this.state.firstOption}\n            handleInputChange={this.handleFirstInputChange} />\n\n          <RadioGroup \n            groupName=\"secondGroup\"\n            selectedOption={this.state.secondOption}\n            handleInputChange={this.handleSecondInputChange} />\n          \n\n      </header>\n    </div>\n  );\n}\n}\n\nconst RadioGroup = (props) => {\n  return (\n    <div className=\"radioGroup\">\n      <div className={`selectedSlider ${props.selectedOption}`}></div>\n      <Radio\n        id={`${props.groupName}firstRadio`}\n        group={props.groupName}\n        value=\"left\"\n        label=\"First\"\n        isSelected={props.selectedOption === \"left\"}\n        handleInputChange={props.handleInputChange} />\n\n      <Radio\n        id={`${props.groupName}SecondRadio`}\n        group={props.groupName}\n        value=\"right\"\n        label=\"Second\"\n        isSelected={props.selectedOption === \"right\"}\n        handleInputChange={props.handleInputChange} />\n    </div>\n  )\n}\nconst Radio = (props) =>  {\n  return(\n    <>\n      <input \n        type=\"radio\" \n        id={props.id} \n        name={props.group}\n        value={props.value}  \n        onChange={() => props.handleInputChange(props.value)}\n        checked={props.isSelected} />\n      <label htmlFor={props.id}>\n      {props.label}\n      </label>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}